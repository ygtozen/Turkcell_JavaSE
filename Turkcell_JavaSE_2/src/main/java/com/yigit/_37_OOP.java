package com.yigit;

// OOP : Object Oriented Programming
// Obje Nedir ? Tanýmlayabildiðimiz özellikleri olan herþeydir

// Nesne : özelliði olan her þey
// Class : nesneler topluluðu
// Package : Classlar topluluðudur

// nesne deðiþkeni ==> (static yoksa)private String name;
// class deðiþkeni ==> (static varsa) ==> private static String name;

// encapsulation (kapsülleme) :
// private kullanarak verileri sadece ilgili yere göndermek
// Dýþ dünyaya getter and setter ile eriþim
// Dýþ dünyadan iç verileri saklamak için

// Constructor : Yapýcý metod eðer biz class instance edersek (new)
// Classýn ilk uðrayacaðý yerdir
// return edilemez
// Class ismi ile aynýdýr
// biz eðer constructor oluþturmazsak Java arka planda kendidis yapar.
// parametreli ve parametresiz diye ikiye ayrýlýr

// break : döngüyü kýrmak (döngüden çýkmak)
// return : metodu kýrmak (metoddan çýkmak)
// continue : döngü sadece o þartta çalýþmasýn sonrasýnda döngüye devam etsin

// cast : dönüþtürmek

// toString ==> variable kullanýrsa Çevirmek için,
// toString ==> class'ta kullanýrsak ==> Kimliktir

// hasCode ==> O class'ýn sadece unique(Eþsiz) bir anahtarý vardýr

// Java 100% By pass value

// boxing : primitive Wrapper çevirmek
// unboxing : Wrapper'ý primitive çevirmek

// null pointer exception : olmayan bir þeye eriþmeye çalýþýyorsunuz
// exception handling : exception yakalamak

// argüman : metodu çaðýrýrken veridiðimiz deðerleridir
// parametre : Metod oluþturulurken kullandýðýmýz verilerdir.

// @Override : Var olan veryi ezmek yani ben ne dersem o olur dmeektir
// Overloading : Ayný metodun sadece parametresi sayýsý ve türü farklý olmasdýr

// final
// deðiþken : sabit
// metodlarda override edemeyiz
// class'larda extend edemeyiz

// static:
// duraðan dinamk
// new oluþturmadan verilerimizi ==> ClassAdi.staticIsim

// Java 100% OOP deðildir (Primitive türlerden dolayý)
// Nesnelerin kendine ait özelikleri vardýr
// OOP accces modifier iyi öðrenmek gerekir
// public, privite, protected
// new instance yani bizim için hafýzada yer açýyor (Doðmuþ)
// null : hafýzada yer kaplamayan (Doðmamýþ)
// sýfýr : Hafýzada bir yere sahip ancak veri sýfýrýdýr

// this : global deðiþkenlere eriþmek ==> this.surname
// Baþka constructor çaðýrmak ==> this(10,"merhabalar");

// super:
// üst atadaki verilere, metodlara eriþim saðlamak için kullanýlýr

// ? : Yani buraya her þey gelebilir yani object

// runtime error
// compiler error
// syntac error

// 0 ==> toplamda etkisiz çarpamda yutan eleman
// 1 ==> çarpmada etkisiz
// initial Data : Baþlangýç deðerini vermektir

// is -a : (Inheritance)
// can-do : (Interface)
// has -a : (Composition)

// Bean : (Çekirdek)
// POJO < bean < @ManagementBean < CDI (@Named)
// POJO : Plain Old Java Object (sadece nesne deðiþkeni ve getter setter
// topluluðu)
// BEAN : nesne deðiþkeni ve getteri setter, construcor (parametreli -
// parametresiz),
// serializable, toString(), EqualHashCode topluluðudur)
// managametn => JSF
// CDI ==> Spring Framework (@Inject) Spring Boot (@Autowired)

// local variable
// global variable

// instanceOf

// polymorphism : çok biçimlilik *

// business layer :

// katmanlý mimari : n-tier architecture - monalitik architecture

// MVC : Model View Controller

// ER diagram nedir ? *

// JIRA nedir ? : Proje yönetim program aracýdýr.

// ++++++++++++++++++++++++++++++++++++++++++++++++

// UML Diagram :
// Unified Modelling Language :
// 1995'te standar bir dil oluþturalým.
// UML : Bir Modelleme dilidir.
// Standartlaþtýrýlmýþ kalýplar sunar
// Büyük resmi görmemize olanak saðlar
// Yazýlýmcýlar ve diðer departmant kiþilerin basit, kolay bir þekilde
// anlaþabilmesini saðlar
// Karmaþýklýðý basitleþtirmesini saðlamak

// Tool : ummlet, draw.io, paint 3d
// creately.com

// UML Çeþitleri
// 1-) Yapý diyagram (DATABASE MODELLEME)
// 2-) DAVRANIÞ MODELLEME (Baþlangýç - Bitiþ - Göstermek)

// Bilemeiz gerekir
// public, private, protected
// medhod
// class
// packet

// UML Class
// 1-) CLASS
// 2-) Deðiþkenler
// 3-) Metodlar

// public +
// private -
// protect #
// static (_)

// public void deneme(int sayi1, int sayi2) ==>
// +deneme(sayi:numver,sayi:number):void
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Devops bir fesefedir - Geliþtirme ve iþlemler
// Developers and Operations yapýlarýndan oluþur: Bilgi Teknolojileri (IT)
// Agile : projelerimizin yönetimlerini yazýlým süreçlerinde problemleri çözmek
// için ortaya atýlmýþtýr
// Scram : elimizde büyük bir parça bunu küçük parçalara bölerek o parçalarý
// yaparak birleþtirme

// OOP 4 temel prensibi nelerdir?
// I ==> Inheritance (Kalýtým)
// P ==> Polymorphism (Çok Biçimlilik)
// E ==> Encapsulation (Sarmalayýcý)
// A ==> Abstraction (abstract + interface)
// abstraction : Soyutlama
// abstract : soyut

public class _37_OOP {
	
}
